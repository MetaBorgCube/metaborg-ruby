#!/usr/bin/env ruby

# NOTE DEPENDS ON QuotedNonExpandedLiteralStringGen MODULE!!!

# Iterate over all characters except alphanumeric characters
# For each of these characters, generate a production that uses the character
# as string delimiters

TEST_MODE = true

numeric = (48..57).to_a
alpha_lower = (97..122).to_a
alpha_upper = (65..90).to_a
matching_characters = {
  123 => 125,
  40 => 41,
  91 => 93,
  60 => 62
}

non_delimiter_characters = numeric + alpha_lower + alpha_upper + matching_characters.keys + matching_characters.values

delimiter_characters = (0..127).to_a - non_delimiter_characters

if TEST_MODE
  delimiters = { 123 => 125 }
else
  delimiters = delimiter_characters.zip(delimiter_characters).to_h.merge(matching_characters)
end

def printable?(char)
  (32..126).include?(char)
end

def productions(*prods)
  prods.map { |s| "  #{s}" }.join("\n")
end

puts '// This module was automatically generated by /scripts/generate_quoted_expanded_string_productions.rb'
puts 'module QuotedExpandedLiteralStringGen'
puts
puts 'imports'
puts
puts '  DoubleQuotedString'
puts '  QuotedNonExpandedLiteralStringGen'
puts

delimiters.each do |char_start, char_end|
  printable_char_start = printable?(char_start) ? char_start.chr : "\\#{char_end}"
  printable_char_end = printable?(char_end) ? char_end.chr : "\\#{char_end}"

  puts "// === Delimited with #{printable_char_start} and #{printable_char_end} ==="
  puts 'syntax'
  puts

  puts productions(
    "ExDelimStr-CF = ExDelimStr-#{char_start}-CF",
    "ExDelimStr-#{char_start}-CF = DELIM-START-#{char_start}-LEX ExLitStr-#{char_start}-List-CF DELIM-END-#{char_start}-LEX",
    '',
    "ExLitStr-#{char_start}-List-CF.StrQECharListEnd =",
    "ExLitStr-#{char_start}-List-CF.StrQECharList = ExLitStr-#{char_start}-CF ExLitStr-#{char_start}-List-CF",
    '',
    "ExLitStr-#{char_start}-CF = ExLitChar-#{char_start}-CF",
    "ExLitStr-#{char_start}-CF = ExDelimStr-#{char_start}-CF",
    '',
    "ExLitNonEscChar-#{char_start}-LEX = NonExLitNonEscChar-#{char_start}-LEX",
    '',
    "ExLitChar-#{char_start}-CF.StrQEChar = ExLitNonEscChar-#{char_start}-LEX",
    "ExLitChar-#{char_start}-CF.StrQEHash = NonInterpolationHashSymbol-LEX",
    "ExLitChar-#{char_start}-CF.StrQEEsc = DoubleEscapeSequence-LEX",
    "ExLitChar-#{char_start}-CF.StrQEInterp = InterpolatedCharacterSequence-CF",
    ''
  )

  puts 'lexical syntax'
  puts
  puts productions(
    "ExLitNonEscChar-#{char_start}-LEX = \'#\' {reject}"
  )
end
